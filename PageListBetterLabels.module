<?php
class PageListBetterLabels extends WireData implements Module, ConfigurableModule {

    protected $pageLabelField = 'title';

    public static function getModuleInfo() {
        return array(
            'title' => 'Page List Better Labels',
            'summary' => 'Customize label separator and allow for "label" words that do not get proccessed.',
            'version' => 108,
            'autoload' => true
        );
    }

    protected static $defaults = array(
        'pageLabelSeparator' => '<span style="opacity: 0.3;">|</span>',
        'allowHtml' => '0',
        'imageStyleBorder' => 'none',
        'pageLabelImageSize' => '48',
    );


	public function init() {

        $this->addHookAfter('ProcessPageList::execute', $this, 'loadStyles');
        $this->addHookBefore('ProcessPageListRender::getPageLabel', $this, 'buildLabels');
	}

    public function loadStyles($event){
        $this->config->styles->add($this->config->urls->PageListBetterLabels . "PageListBetterLabels.css");
    }
    public function buildLabels($event){

        $options = self::$defaults;
        foreach($options as $key => $unused) {
            $options[$key] = $this->get($key) ? $this->get($key) : $options[$key];
        }

        $event->replace = true;
        $page = $event->arguments('page');

        $page->of(false);  // needs to be off to support image output

        $value = '';
        $skipSep = false;

        // if the page's template specifies a pageLabelField, use that
        $pageLabelField = trim($page->template->pageLabelField);

        // otherwise use the one specified with this instance
        if(!strlen($pageLabelField)) $pageLabelField = $this->pageLabelField;

        // convert to array
        if(strpos($pageLabelField, ' ')) $fields = explode(' ', $pageLabelField);
            else $fields = array($pageLabelField);

        // get thumbnail size setting
        if(strpos($options['pageLabelImageSize'], ",")){
            $size = explode(",", $options['pageLabelImageSize']);
            $sizeWidth = $size[0];
            $sizeHeight = $size[1];
        }
        else{
            $sizeWidth = $options['pageLabelImageSize'];
            $sizeHeight = $options['pageLabelImageSize'];
        }

        foreach($fields as $field) {

            $beforeLabel = "";
            $afterLabel = "";
            $has_thumb = false;


            if ( substr($field, -2, 2) == "--" ) { // check to see if a the last 2 charactera are "--"
                $beforeLabel = str_replace('-','', $field);
            }
            elseif ( substr($field, -1, 1) == "-" ) { // check to see if a the last character is "-"
                $beforeLabel = str_replace('-',' ', $field);
            }


            if ( substr($field, 0, 1) == "-" ) { // check to see if a the first character is "-"
                if ( substr($field, 0, 2) == "--" ) { // check to see if a the first 2 characters are "--"
                    $afterLabel = str_replace('--','', $field);
                }
                else{
                    $afterLabel = str_replace('-',' ', $field);
                }

                if ( substr($field, -1, 1) == "-" ) { // check to see if a the last character is also "-"
                    $beforeLabel = "";
                    $skipSep = true;
                }
            }


            // check if the feild requested ins a subfield
            if(strpos($field, ".")) {
                list($field, $subfield) = explode(".", $field);
            } else $subfield = '';


            $v = $page->get($field);


            // handle the image field (taken from Soma's PageListImageLabel)
            if($v instanceof Pageimages && $subfield == ''){

                $styles = " style='border:".$options['imageStyleBorder'].";'";

                $thumb_url = '';

                // if image field is of type cropimage (thumbnails module)
                if($this->fields->get($field)->type == "FieldtypeCropImage" && $subfield){
                    if(count($v)){
                        $thumb_url = $v->first()->getThumb($subfield);
                        $thumb_url = $v->url . $this->resizeThumb($v, $thumb_url, array($sizeWidth,$sizeHeight));
                    }
                } else { // all normal image fields
                    if(count($v)){
                        $thumb_url = $page->$field->first()->size($sizeWidth,$sizeHeight)->url;
                    }
                }

                if($thumb_url){
                    $v = "<span class='label-image' {$styles} ><img src='" . $thumb_url . "'/></span>";
                    $has_thumb = true;
                } else{
                    $v = "";
                }
            }

            if($subfield && is_object($v)) {
                if($v instanceof WireArray && count($v)) $v = $v->first();
                $v = $v->get($subfield);

            } else if(($field == 'created' || $field == 'modified') && ctype_digit("$v")) {
                $v = date($this->fuel('config')->dateFormat, (int) $v);
            } else if( $this->fields->get($field)->type == "FieldtypeDatetime" && ctype_digit("$v")) {
                $v = date($this->fields->get($field)->dateOutputFormat, (int) $v); // manually format datetime fields based on output format setting
            }



            if($v){
                if(!$has_thumb) {
                    $v = strip_tags($v);
                    $v = htmlspecialchars($v, ENT_QUOTES, "UTF-8", false);
                }
                if($skipSep) {
                    $value .= $v;
                    $skipSep = false;
                }
                else{
                    $value .= ($value ? ' '.$options["pageLabelSeparator"].' ' : '') . "$v";
                }
            }
            elseif ($beforeLabel) {
                if($skipSep){
                    $value .= $beforeLabel;
                }
                else{
                    $value .= ($value ? ' '.$options["pageLabelSeparator"].' ' : '') . $beforeLabel;
                }
                $skipSep = true;

            }
            $value .= $afterLabel;

            $afterLabel = "";

            // skip the next separator if we found a thumbnail this time
            if ($has_thumb) {
                $skipSep = true;
            }
        }

        if(!strlen($value)) $value = $page->get("name");

        $event->return = $value;
    }



    private function resizeThumb($field, $thumb_url, $size){
        $thumb_path = $field->path() . basename($thumb_url);
        $filename = $size[0] . "x" . $size[1] . "_" . basename($thumb_url);
        $thumb_path_new = $field->path() . $filename;
        // if already exists, no need to resize again
        if(file_exists($thumb_path_new)) return $filename;
        if(@copy($thumb_path, $thumb_path_new)){
            $sizer = new ImageSizer($thumb_path_new);
            $sizer->resize($size[0],$size[1]);
            return $filename;
        } else return false;
    }


    static public function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::$defaults, $data);

        $fields = new InputfieldWrapper();
        $modules = Wire::getFuel("modules");

        $field = $modules->get("InputfieldText");
        $field->attr('name', 'pageLabelSeparator');
        $field->attr('size', 100);
        $field->attr('value', $data['pageLabelSeparator']);
        $field->label = "Label Separator";
        // $field->description = "";
        // $field->notes = "";
        $fields->append($field);


        $field = $modules->get("InputfieldText");
        $field->attr('name', 'imageStyleBorder');
        $field->attr('size', 100);
        $field->attr('value', $data['imageStyleBorder']);
        $field->label = "Image Label Border Syyle";
        $field->description = "The CSS to be used on image label types.";
        $field->notes = "Uses the 'border' shorthand, example for a black border (border: 1px solid #000;) enter '1px solid #000' above (without the quotes)";
        $fields->append($field);

        $field = $modules->get("InputfieldText");
        $field->attr('name', 'pageLabelImageSize');
        $field->attr('size', 100);
        $field->attr('value', $data['pageLabelImageSize']);
        $field->label = "Image Label Size";
        $field->description = "Thumbnail size. Specify two number comma separated, or single number for square thumbnails. Will be ignored if field is of type FieldtypeCropImage (thumbnail module).";
        $fields->append($field);

        return $fields;
    }


}
